package com.zts.service;import java.io.BufferedWriter;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;/** * <b>文件读取类</b><br /> * 1、按字节读取文件内容<br /> * 2、按字符读取文件内容<br /> * 3、按行读取文件内容<br /> * <p> * Created by Lycan on 2017/9/18. */public class FileOperator {    private static void writerFileByBufferedWriter(String filePath,String content){        createFile(filePath);        FileOutputStream fileOutputStream = null;        OutputStreamWriter outputStreamWriter = null;        BufferedWriter bufferedWriter = null;        try {            fileOutputStream=new FileOutputStream(filePath);            outputStreamWriter=new OutputStreamWriter(fileOutputStream,"UTF-8");            bufferedWriter=new BufferedWriter(outputStreamWriter);            bufferedWriter.write(content);        } catch (IOException e) {            e.printStackTrace();        } finally{            try {                if(null!=bufferedWriter){                    bufferedWriter.flush();                    bufferedWriter.close();                }                if(null!=outputStreamWriter){                    outputStreamWriter.close();                }                if(null!=fileOutputStream){                    fileOutputStream.close();                }            }catch (IOException e) {                e.printStackTrace();            }        }    }    /**     * 使用Java.nio ByteBuffer字节将内容写到文件内容末尾     *     * @param filePath 文件路径     * @param content 写入内容     *     */    @SuppressWarnings("unused")    static void writeFileByByteBuffer(String filePath, String content) {        //创建文件        createFile(filePath);        FileOutputStream fos = null;        FileChannel fc_out = null;        try {            fos = new FileOutputStream(filePath, true);            fc_out = fos.getChannel();            ByteBuffer buf = ByteBuffer.wrap(content.getBytes());            buf.put(content.getBytes());            buf.flip();            fc_out.write(buf);        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                if (null != fc_out) {                    fc_out.close();                }                if (null != fos) {                    fos.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }    }    /**     * //TODO 应该是如果存在文件，清空里面的内容，然后重新写入就够了，后期有时间再改     * 删除文件，重新生成文件，写入内容     * @param filePath 文件路径     * @param content 写入内容     */    public static void reWriteFile(String filePath, String content) {        deleteFile(filePath);        writerFileByBufferedWriter(filePath,content);    }    static void createFile(String path) {        Path directoryPath = Paths.get(path);        if (!Files.exists(directoryPath)) {            try {                Files.createFile(directoryPath);            } catch (IOException e) {                e.printStackTrace();            }        }    }    private static void deleteFile(String path) {        Path directoryPath = Paths.get(path);        try {            Files.deleteIfExists(directoryPath);        } catch (IOException e) {            e.printStackTrace();        }    }    static void createDirectory(String path) {        Path directoryPath = Paths.get(path);        if (!Files.exists(directoryPath)) {            try {                Files.createDirectory(directoryPath);                System.out.println("File created successfully!");            } catch (IOException e) {                e.printStackTrace();            }        }    }}